baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned)
inspect(baseballRules)
plot(baseballRules, method="scatterplot")
plot(baseballRules, method="graph", control=list(type = "items", alpha = 1))
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned, parameter = list(minlen = 3, support = 0.1, conf = 0.4),
appearance = list(lhs = c("승패여부=win", "승패여부=lose", "승패여부=draw"), default = "rhs"))
inspect(baseballRules)
plot(baseballRules, method="scatterplot")
plot(baseballRules, method="graph", control=list(type = "items", alpha = 1))
library(arules)
library(arulesViz)
library(wordcloud)
baseballTeamVSTeamData <- read.csv("C:/Users/stories2/Documents/RProject/TeamVSTeam2.csv")
head(baseballTeamVSTeamData)
str(baseballTeamVSTeamData)
baseballTeamVSTeamDataWithCleaned <- baseballTeamVSTeamData[, -c(1, 6:8, 10)]
#삭제 내용
#날짜, 디테일 링크, 중계 TV, 중계 라디오, 비고
notDeleteIndex <- which((baseballTeamVSTeamDataWithCleaned$팀1 == '두산' |
baseballTeamVSTeamDataWithCleaned$팀1 == 'NC' |
baseballTeamVSTeamDataWithCleaned$팀1 == '넥센' |
baseballTeamVSTeamDataWithCleaned$팀1 == 'LG' |
baseballTeamVSTeamDataWithCleaned$팀1 == 'KIA' |
baseballTeamVSTeamDataWithCleaned$팀1 == 'SK' |
baseballTeamVSTeamDataWithCleaned$팀1 == '한화' |
baseballTeamVSTeamDataWithCleaned$팀1 == '롯데' |
baseballTeamVSTeamDataWithCleaned$팀1 == '삼성' |
baseballTeamVSTeamDataWithCleaned$팀1 == 'kt') &
(baseballTeamVSTeamDataWithCleaned$팀2 == '두산' |
baseballTeamVSTeamDataWithCleaned$팀2 == 'NC' |
baseballTeamVSTeamDataWithCleaned$팀2 == '넥센' |
baseballTeamVSTeamDataWithCleaned$팀2 == 'LG' |
baseballTeamVSTeamDataWithCleaned$팀2 == 'KIA' |
baseballTeamVSTeamDataWithCleaned$팀2 == 'SK' |
baseballTeamVSTeamDataWithCleaned$팀2 == '한화' |
baseballTeamVSTeamDataWithCleaned$팀2 == '롯데' |
baseballTeamVSTeamDataWithCleaned$팀2 == '삼성' |
baseballTeamVSTeamDataWithCleaned$팀2 == 'kt'))
head(notDeleteIndex)
str(notDeleteIndex)
str(baseballTeamVSTeamDataWithCleaned)
baseballTeamVSTeamDataWithCleaned <- baseballTeamVSTeamDataWithCleaned[notDeleteIndex, ]
head(baseballTeamVSTeamDataWithCleaned)
str(baseballTeamVSTeamDataWithCleaned)
team1WinIndex <- which(baseballTeamVSTeamDataWithCleaned$팀1.점수 > baseballTeamVSTeamDataWithCleaned$팀2.점수 &
baseballTeamVSTeamDataWithCleaned$팀1.점수 != -1 & baseballTeamVSTeamDataWithCleaned$팀2 != -1)
teamDrawIndex <- which(baseballTeamVSTeamDataWithCleaned$팀1.점수 == baseballTeamVSTeamDataWithCleaned$팀2.점수 &
baseballTeamVSTeamDataWithCleaned$팀1.점수 != -1 & baseballTeamVSTeamDataWithCleaned$팀2 != -1)
teamNotPlayedIndex <- which(baseballTeamVSTeamDataWithCleaned$팀1.점수 == -1 | baseballTeamVSTeamDataWithCleaned$팀2.점수 == -1)
head(team1WinIndex)
head(teamDrawIndex)
head(teamNotPlayedIndex)
baseballTeamVSTeamWithWinOrLoseData <- baseballTeamVSTeamDataWithCleaned[, -c(3:4)]
#삭제 내용
#각 팀이 얻은 점수
head(baseballTeamVSTeamWithWinOrLoseData)
str(baseballTeamVSTeamWithWinOrLoseData)
dim(baseballTeamVSTeamWithWinOrLoseData)[1]
baseballWinOrLoseDummyData <- rep("lose", dim(baseballTeamVSTeamWithWinOrLoseData)[1])
baseballWinOrLoseDummyData[team1WinIndex] <- "win"
baseballWinOrLoseDummyData[teamDrawIndex] <- "draw"
head(baseballWinOrLoseDummyData)
baseballWinOrLoseDummyData <- data.frame(baseballWinOrLoseDummyData)
names(baseballWinOrLoseDummyData) <- "승패여부"
str(baseballWinOrLoseDummyData)
head(baseballWinOrLoseDummyData)
baseballWinOrLoseDummyData$승패여부 <- as.factor(baseballWinOrLoseDummyData$승패여부)
str(baseballWinOrLoseDummyData)
baseballTeamVSTeamDataWithCleaned <- cbind(baseballTeamVSTeamWithWinOrLoseData, baseballWinOrLoseDummyData)
baseballTeamVSTeamDataWithCleaned <- baseballTeamVSTeamDataWithCleaned[-teamNotPlayedIndex, ]
str(baseballTeamVSTeamDataWithCleaned)
dim(baseballTeamVSTeamDataWithCleaned)
baseballTeamVSTeamDataWithCleaned$팀1 <- factor(baseballTeamVSTeamDataWithCleaned$팀1)
baseballTeamVSTeamDataWithCleaned$팀2 <- factor(baseballTeamVSTeamDataWithCleaned$팀2)
baseballTeamVSTeamDataWithCleaned$장소 <- factor(baseballTeamVSTeamDataWithCleaned$장소)
baseballTeamVSTeamDataWithCleaned$승패여부 <- factor(baseballTeamVSTeamDataWithCleaned$승패여부)
str(baseballTeamVSTeamDataWithCleaned)
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned)
inspect(baseballRules)
plot(baseballRules, method="scatterplot")
plot(baseballRules, method="graph", control=list(type = "items", alpha = 1))
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned, parameter = list(minlen = 3, support = 0.1, conf = 0.4),
appearance = list(lhs = c("승패여부=win", "승패여부=lose", "승패여부=draw"), default = "rhs"))
inspect(baseballRules)
plot(baseballRules, method="scatterplot")
plot(baseballRules, method="graph", control=list(type = "items", alpha = 1))
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned, parameter = list(minlen = 3, support = 0.1, conf = 0.4),
appearance = list(lhs = c("승패여부=win", "승패여부=lose", "승패여부=draw"), default = "rhs"))
inspect(baseballRules)
plot(baseballRules, method="scatterplot")
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned)
inspect(baseballRules)
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned, parameter = list(minlen = 3, support = 0.1, conf = 0.4),
appearance = list(lhs = c("승패여부=win", "승패여부=lose", "승패여부=draw"), default = "rhs"))
inspect(baseballRules)
View(baseballTeamVSTeamDataWithCleaned)
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned, parameter = list(minlen = 3, support = 0.1, conf = 0.4),
appearance = list(rhs = c("Survived=0", "Survived=1"), default="lhs"))
inspect(baseballRules)
plot(baseballRules, method="scatterplot")
plot(baseballRules, method="graph", control=list(type = "items", alpha = 1))
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned, parameter = list(minlen = 3, support = 0.1, conf = 0.4),
appearance = list(rhs = c("승패여부=win", "승패여부=draw", "승패여부=lose"), default="lhs"))
inspect(baseballRules)
baseballRules <- apriori(baseballTeamVSTeamDataWithCleaned, parameter = list(minlen = 2, support = 0.1, conf = 0.0),
appearance = list(rhs = c("승패여부=win", "승패여부=draw", "승패여부=lose"), default="lhs"))
inspect(baseballRules)
plot(baseballRules, method="scatterplot")
plot(baseballRules, method="graph", control=list(type = "items", alpha = 1))
function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confidence matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
install.packages("e1071", dependencies = TRUE)
library(e1071)
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confidence matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
install.packages("e1071", dependencies = TRUE)
library(e1071)
install.packages("e1071", dependencies = TRUE)
library("e1071", lib.loc="~/R/win-library/3.3")
library(e1071)
setwd("C:\Users\stories2\Documents\RProject")
ploan <- read.csv("Personal Loan.csv")
setwd("C:\Users\stories2\Documents\RProject")
ploan <- read.csv("Personal Loan.csv")
setwd("C:/Users/stories2/Documents/RProject")
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confidence matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
install.packages("e1071", dependencies = TRUE)
library(e1071)
setwd("C:/Users/stories2/Documents/RProject")
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
View(ploan)
inputIndex <- c(2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)
targetIndex <- 10
source('~/RProject/12.R', echo=TRUE)
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confidence matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
install.packages("e1071", dependencies = TRUE)
library(e1071)
setwd("C:/Users/stories2/Documents/RProject")
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
inputIndex <- c(2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)
targetIndex <- 10
ploanInputData <- ploan[, inputIndex]
ploanTargetData <- ploan[, targetIndex]
ploanData <- data.frame(ploanInputData, ploanTargetData)
dim(ploanData)
head(ploanData)
dataLength = dim(ploanData)[1]
trainIndex <- sample(1:dataLength, round(0.7 * dataLength))
ploanTrainData <- ploanData[trainIndex, ]
ploanTestData <- ploanData[-trainIndex, ]
nbModel <- naiveBayes(ploanTargetData ~ ., data = ploanTrainData)
nbModel$apriori
nbModel$tables
posterior <- predict(nbModel, ploanTestData, type = "raw")
posterior
str(posterior)
nbPrey <- predict(nbModel, ploanTestData, type = "class")
nbPrey
cfmatrix <- table(ploanTestData$ploanTargetData, nbPrey)
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confusion matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
install.packages("e1071", dependencies = TRUE)
library(e1071)
setwd("C:/Users/stories2/Documents/RProject")
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
inputIndex <- c(2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)
targetIndex <- 10
ploanInputData <- ploan[, inputIndex]
ploanTargetData <- ploan[, targetIndex]
ploanData <- data.frame(ploanInputData, ploanTargetData)
dim(ploanData)
head(ploanData)
dataLength = dim(ploanData)[1]
trainIndex <- sample(1:dataLength, round(0.7 * dataLength))
ploanTrainData <- ploanData[trainIndex, ]
ploanTestData <- ploanData[-trainIndex, ]
nbModel <- naiveBayes(ploanTargetData ~ ., data = ploanTrainData)
nbModel$apriori
nbModel$tables
posterior <- predict(nbModel, ploanTestData, type = "raw")
posterior
str(posterior)
nbPrey <- predict(nbModel, ploanTestData, type = "class")
nbPrey
cfmatrix <- table(ploanTestData$ploanTargetData, nbPrey)
nbModel$apriori
nbModel$tables
posterior <- predict(nbModel, ploanTestData, type = "raw")
posterior
str(posterior)
ploanTestData
nbPrey <- predict(nbModel, ploanTestData, type = "class")
nbPrey
cfmatrix <- table(ploanTestData$ploanTargetData, nbPrey)
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confusion matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
#install.packages("e1071", dependencies = TRUE)
library(e1071)
setwd("C:/Users/stories2/Documents/RProject")
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
inputIndex <- c(2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)
targetIndex <- 10
ploanInputData <- ploan[, inputIndex]
ploanTargetData <- ploan[, targetIndex]
ploanData <- data.frame(ploanInputData, ploanTargetData)
dim(ploanData)
head(ploanData)
dataLength = dim(ploanData)[1]
trainIndex <- sample(1:dataLength, round(0.7 * dataLength))
ploanTrainData <- ploanData[trainIndex, ]
ploanTestData <- ploanData[-trainIndex, ]
nbModel <- naiveBayes(ploanTargetData ~ ., data = ploanTrainData)
nbModel$apriori
nbModel$tables
posterior <- predict(nbModel, ploanTestData, type = "raw")
posterior
str(posterior)
ploanTestData
nbPrey <- predict(nbModel, ploanTestData, type = "class")
nbPrey
cfmatrix <- table(ploanTestData$ploanTargetData, nbPrey)
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confusion matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
#install.packages("e1071", dependencies = TRUE)
library(e1071)
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
inputIndex <- c(2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)
targetIndex <- 10
ploanInputData <- ploan[, inputIndex]
ploanTargetData <- ploan[, targetIndex]
ploanData <- data.frame(ploanInputData, ploanTargetData)
dim(ploanData)
head(ploanData)
dataLength = dim(ploanData)[1]
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confusion matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return(TPR, TNR, ACC, BCR)
}
#install.packages("e1071", dependencies = TRUE)
library(e1071)
setwd("C:/Users/stories2/Documents/RProject")
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
inputIndex <- c(2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)
targetIndex <- 10
ploanInputData <- ploan[, inputIndex]
ploanTargetData <- as.factor(ploan[, targetIndex])
ploanData <- data.frame(ploanInputData, ploanTargetData)
dim(ploanData)
head(ploanData)
dataLength = dim(ploanData)[1]
trainIndex <- sample(1:dataLength, round(0.7 * dataLength))
ploanTrainData <- ploanData[trainIndex, ]
ploanTestData <- ploanData[-trainIndex, ]
nbModel <- naiveBayes(ploanTargetData ~ ., data = ploanTrainData)
nbModel$apriori
nbModel$tables
posterior <- predict(nbModel, ploanTestData, type = "raw")
posterior
str(posterior)
ploanTestData
nbPrey <- predict(nbModel, ploanTestData, type = "class")
nbPrey
cfmatrix <- table(ploanTestData$ploanTargetData, nbPrey)
perfEval(cfmatrix)
perfEval <- function(cm)
{
TPR = cm[2, 2] / sum(cm[2, ])
TNR = cm[1, 1] / sum(cm[1, ])#confusion matrix
ACC = (cm[1, 1] + cm[2, 2]) / sum(cm)
BCR = sqrt(TPR * TNR)
return (c(TPR, TNR, ACC, BCR))
}
#install.packages("e1071", dependencies = TRUE)
library(e1071)
setwd("C:/Users/stories2/Documents/RProject")
ploan <- read.csv("Personal Loan.csv")
head(ploan)
str(ploan)
class(ploan)
summary(ploan)
inputIndex <- c(2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)
targetIndex <- 10
ploanInputData <- ploan[, inputIndex]
ploanTargetData <- as.factor(ploan[, targetIndex])
ploanData <- data.frame(ploanInputData, ploanTargetData)
dim(ploanData)
head(ploanData)
dataLength = dim(ploanData)[1]
trainIndex <- sample(1:dataLength, round(0.7 * dataLength))
ploanTrainData <- ploanData[trainIndex, ]
ploanTestData <- ploanData[-trainIndex, ]
nbModel <- naiveBayes(ploanTargetData ~ ., data = ploanTrainData)
nbModel$apriori
nbModel$tables
posterior <- predict(nbModel, ploanTestData, type = "raw")
posterior
str(posterior)
ploanTestData
nbPrey <- predict(nbModel, ploanTestData, type = "class")
nbPrey
cfmatrix <- table(ploanTestData$ploanTargetData, nbPrey)
perfEval(cfmatrix)
library(e1071)
performanceTester <- function(confusionMatrix)
{
YYNN <- (confusionMatrix[2, 2] + confusionMatrix[1, 1]) / sum(confusionMatrix)
#정확도
YYC <- confusionMatrix[2, 2] / sum(confusionMatrix[, 2])
#정밀도
YNR <- confusionMatrix[2, 1] / sum(confusionMatrix[1, ])
#특이도
YYR <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
#민감도
BCR = sqrt(YYNN * YNR)
return (c(YYNN, YYC, YNR, YYR))
}
baseballScout <- read.csv("C:/Users/stories2/Documents/RProject/프로야구 나이브베이지안분류.csv")
trainIndex <- c(6:9)
baseballTrainData <- baseballScout[, trainIndex]
baseballTargetData <- baseballScout[, targetIndex]
baseballInputData <- baseballScout[, trainIndex]
baseballTargetData <- baseballScout[, targetIndex]
baseballTargetData <- as.factor(baseballScout[, targetIndex])
baseballBeforeNavie <- data.frame(baseballInputData, baseballTargetData)
head(baseballBeforeNavie)
performanceTester <- function(confusionMatrix)
{
YYNN <- (confusionMatrix[2, 2] + confusionMatrix[1, 1]) / sum(confusionMatrix)
#정확도
YYC <- confusionMatrix[2, 2] / sum(confusionMatrix[, 2])
#정밀도
YNR <- confusionMatrix[2, 1] / sum(confusionMatrix[1, ])
#특이도
YYR <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
#민감도
BCR = sqrt(YYNN * YNR)
return (c(YYNN, YYC, YNR, YYR))
}
library(e1071)
baseballScout <- read.csv("C:/Users/stories2/Documents/RProject/프로야구 나이브베이지안분류.csv")
trainIndex <- c(6:9)
targetIndex <- 14
baseballInputData <- baseballScout[, trainIndex]
baseballTargetData <- as.factor(baseballScout[, targetIndex])
baseballBeforeNavie <- data.frame(baseballInputData, baseballTargetData)
head(baseballBeforeNavie)
dataLength <- dim(baseballBeforeNavie)[1]
trainSampleIndex <- sample(1:dataLength, round(0.7 * dataLength))
baseballTrainData <- baseballBeforeNavie[trainSampleIndex, ]
baseballTestData <- baseballBeforeNavie[-trainSampleIndex, ]
nbModel <- naiveBayes(baseballTargetData ~ ., data = baseballTrainData)
nbModel
nbModel$apriori
nbModel$tables
baseballAfterNavie <- predict(nbModel, baseballTestData, type = "raw")
baseballAfterNavie
nbPrey <- predict(nbModel, baseballTestData, type = "class")
nbPrey
cfMatrix <- table(baseballAfterNavie, nbPrey)
performanceTester <- function(confusionMatrix)
{
YYNN <- (confusionMatrix[2, 2] + confusionMatrix[1, 1]) / sum(confusionMatrix)
#정확도
YYC <- confusionMatrix[2, 2] / sum(confusionMatrix[, 2])
#정밀도
YNR <- confusionMatrix[2, 1] / sum(confusionMatrix[1, ])
#특이도
YYR <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
#민감도
BCR = sqrt(YYNN * YNR)
return (c(YYNN, YYC, YNR, YYR))
}
library(e1071)
baseballScout <- read.csv("C:/Users/stories2/Documents/RProject/프로야구 나이브베이지안분류.csv")
trainIndex <- c(6:9)
targetIndex <- 14
baseballInputData <- baseballScout[, trainIndex]
baseballTargetData <- as.factor(baseballScout[, targetIndex])
baseballBeforeNavie <- data.frame(baseballInputData, baseballTargetData)
head(baseballBeforeNavie)
dataLength <- dim(baseballBeforeNavie)[1]
trainSampleIndex <- sample(1:dataLength, round(0.7 * dataLength))
baseballTrainData <- baseballBeforeNavie[trainSampleIndex, ]
baseballTestData <- baseballBeforeNavie[-trainSampleIndex, ]
nbModel <- naiveBayes(baseballTargetData ~ ., data = baseballTrainData)
nbModel
nbModel$apriori
nbModel$tables
baseballAfterNavie <- predict(nbModel, baseballTestData, type = "raw")
baseballAfterNavie
nbPrey <- predict(nbModel, baseballTestData, type = "class")
nbPrey
cfMatrix <- table(baseballAfterNavie, nbPrey)
dim(nbPrey)
length(nbPrey)
length(baseballAfterNavie)
cfMatrix <- table(baseballTestData$baseballTargetData, nbPrey)
length(nbPrey)
length(baseballAfterNavie)
performanceTester(cfMatrix)
performanceTester <- function(confusionMatrix)
{
YYNN <- (confusionMatrix[2, 2] + confusionMatrix[1, 1]) / sum(confusionMatrix)
#정확도
YYC <- confusionMatrix[2, 2] / sum(confusionMatrix[, 2])
#정밀도
YNR <- confusionMatrix[2, 1] / sum(confusionMatrix[1, ])
#특이도
YYR <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
#민감도
BCR = sqrt(YYNN * YNR)
return (c(YYNN, YYC, YNR, YYR))
}
library(e1071)
baseballScout <- read.csv("C:/Users/stories2/Documents/RProject/프로야구 나이브베이지안분류.csv")
trainIndex <- c(6:9)
targetIndex <- 14
baseballInputData <- baseballScout[, trainIndex]
baseballTargetData <- as.factor(baseballScout[, targetIndex])
baseballBeforeNavie <- data.frame(baseballInputData, baseballTargetData)
head(baseballBeforeNavie)
dataLength <- dim(baseballBeforeNavie)[1]
trainSampleIndex <- sample(1:dataLength, round(0.7 * dataLength))
baseballTrainData <- baseballBeforeNavie[trainSampleIndex, ]
baseballTestData <- baseballBeforeNavie[-trainSampleIndex, ]
nbModel <- naiveBayes(baseballTargetData ~ ., data = baseballTrainData)
nbModel
nbModel$apriori
nbModel$tables
baseballAfterNavie <- predict(nbModel, baseballTestData, type = "raw")
baseballAfterNavie
nbPrey <- predict(nbModel, baseballTestData, type = "class")
nbPrey
cfMatrix <- table(baseballTestData$baseballTargetData, nbPrey)
performanceTester(cfMatrix)
